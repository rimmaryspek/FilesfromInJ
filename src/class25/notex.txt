Collections Framework:
    Collection framework is collection of multiple classes and interfaces which help us process the data
    efficiently and easily.
why we should learn about it.
    1) Its very flexible.
    2) Provide ready-made methods that we can just use.
what is the Syntax?
    Its similar how we create the object of any class, but we use <> to specify the name of the class whose objects
    we are going to store in that class.
Issues with Collections framework:
    1) Collection framework does not work with primitive datatypes(solution is use wrapper classes).

Note: frequently asked in interviews!!!!!!!

Wrapper classes:
    wrapper classes are object types for all primitive types.
Boxing:
    converting the primitive data type to its corresponding wrapper type by explicitly calling methods.
    int num=10;
            // boxing or manual conversion from primitive to wrapper type
          //  Integer wrappedNum=Integer.valueOf(num);
Auto Boxing:
    converting the primitive data type to its corresponding wrapper type by simply assigning the values.
     Integer wrappedNum=10;
Unboxing:
    Converting a wrapper type to its corresponding primtive type by explicitly calling a method.
      //unboxing converting a wrapper type to a corresponding primitive type
          //  int num2=wrappedNum.intValue();
Auto Unboxing:
    converting a wrapper to corresponding primitive automatically by just assigning the value.
    Integer wrappedNum=new Integer(10);
    int num2=wrappedNum;

ArrayList Class:
    it is a classes in collections framework that allows us to store data like an array.
    some common methods from this class are 1) add() 2) remove 3) contains 4) size().
Iterator:
    its a mechanism that allows us to iterate and delete data from any class in collections framework.
    it has hasNext() next() remove().
why we should learn about Iterator?
    Because loops are not safe when we perform an operation that can change the size of a data structure.
ArrayList Vs LinkedList
    Both of the classes implement the list interface which means both of them will have same methods.
ArrayList:
    uses an array behind the scenes to store the data.
    we should use arrayList when we are retrieving the data most of the time and not inserting the data in the start or in-between
    if we have to shift the data.
    to the list.
LinkedList:
    Linked-list does not store the data in consecutive memory locations that's why it is easier to insert and remove the data from anywhere
    in a list.
    if you are going to manipulate the data(shifting of elements) always use linked-list.

if most of the time you use add or remove method then use linkedList.
if most of the time you use get method use ArrayList.

Sets

